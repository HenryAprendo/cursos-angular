* GUARDIANES.

Consiste en bloquear el acceso a ciertas rutas de acuerdo a una condición, por ejemplo que un usuario no tenga acceso a un cms, sino solo un administrativo.
O que solo el usuario pueda tener acceso a un perfil solo cuando ya haya sido autenticado con un token por parte de un backend.

* Tipos.
a. CanActivate: Protege al acceso a una ruta.
	

1.Creación de un guardia CanActivate
* ng g g guards/auth

2. Implementamos el metodo canActive:

import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';
import { Observable } from 'rxjs';
import { TokenService } from '../services/token.service';


@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {

  constructor(private tokenService:TokenService) {}

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
    const token = this.tokenService.getToken();
       if(!token) {
      this.router.navigate(['/home'])
      return false;
    }
    return true;
  }

}


3. Protegemos la ruta en el routing con el AuthGuard en la definición:
	import { AuthGuard } from '../guards/auth.guard';

   {
      path: 'profile',
      canActivate: [AuthGuard],
      component: ProfileComponent
   },

4. Habilitamos el routerLink en el profile:
    <button *ngIf="!profile?.email; else elseBlock" (click)="login()">Login</button>
      <ng-template #elseBlock>
        <a routerLink="/profile">{{profile?.email}}</a>
      </ng-template>



5. redireccionamiento cuando el token no existe: 
Con Router podemos hacer redireccionamiento si no existe el token
import { Router } from '@angular/router;
this.router.navigate(['/home'])





