		MANEJO DE ERRORES

*  this.productsService.getProduct(id)
    .subscribe({
      next: (data) => {
        this.toggleProductDetail();
        this.productChosen = data;
        this.statusDetails = 'success';
      },
      error: (response) => {
        this.toggleProductDetail();
        console.log(response.error.message);
        this.statusDetails = 'error';
      }
    })

En el subscribe implementamos un objeto, que puede implementar 3 m√©todos.
next, error, completed todos opcionales.

En este caso en el next implementamos la data, y en el de error los errores de con el mensaje proveniente del backend


* Manipulando errores en las peticiones

import {HttpErrorResponse, HttpStatusCode } from '@angular/common/http';
import {catchError} from 'rxjs/operators';
import { throwError } from 'rxjs';

 getProduct(id:string) {
    return this.http.get<Product>(`${this.apiUrl}/${id}`)
    .pipe(
      catchError( (error:HttpErrorResponse) => {

        if(error.status === HttpStatusCode.Conflict) {
          return throwError( () => new Error('Algo esta fallando en le server') );
        }

        if(error.status === HttpStatusCode.NotFound) {
          return throwError( () => new Error('El producto no existe') );
        }

        if(error.status === HttpStatusCode.Unauthorized) {
          return throwError( () => new Error('No estas autorizado') );
        }

        return throwError( () => new Error('Ups algo salio mal') );

      })
    )
  }